/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package trabalho1;

import javax.swing.JOptionPane;

/**
 *
 * @author ranie
 */
public class TelaTransferencia extends javax.swing.JFrame {

    Contas acc1;
    ContaPoupanca acc2; 
    ContaEspecial acc3;
    
    /** Creates new form TelaTransferencia
     * @param acc1
     * @param acc2
     * @param acc3 */
    public TelaTransferencia(Contas acc1, ContaPoupanca acc2, ContaEspecial acc3) {
        this.acc1 = acc1;
        this.acc2 = acc2;
        this.acc3 = acc3;
        initComponents();
    }

    private TelaTransferencia() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textFieldNumeroContaDe = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textFieldValorTransferencia = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textFieldNumeroContaPara = new javax.swing.JTextField();
        btnContinuarTelaTransferencia = new javax.swing.JButton();
        btnVoltarTelaTransferencia = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Operação: Transferência");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Transferir de:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Número da conta:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Valor (R$):");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Para:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Número da conta:");

        btnContinuarTelaTransferencia.setText("Continuar");
        btnContinuarTelaTransferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinuarTelaTransferenciaActionPerformed(evt);
            }
        });

        btnVoltarTelaTransferencia.setText("Voltar");
        btnVoltarTelaTransferencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarTelaTransferenciaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(btnContinuarTelaTransferencia)
                                .addGap(18, 18, 18)
                                .addComponent(btnVoltarTelaTransferencia))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel1)))
                        .addGap(0, 42, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textFieldValorTransferencia))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(textFieldNumeroContaDe))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldNumeroContaPara))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textFieldNumeroContaDe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textFieldValorTransferencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textFieldNumeroContaPara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnContinuarTelaTransferencia)
                    .addComponent(btnVoltarTelaTransferencia))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarTelaTransferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarTelaTransferenciaActionPerformed
        // TODO add your handling code here:
        FaseDeOperacoes inicio = new FaseDeOperacoes(this.acc1, this.acc2, this.acc3);
        this.setVisible(false);
        inicio.setVisible(true);
    }//GEN-LAST:event_btnVoltarTelaTransferenciaActionPerformed

    private void btnContinuarTelaTransferenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinuarTelaTransferenciaActionPerformed
        // TODO add your handling code here:
        //Caso 1: Transferência DA conta 1 PARA a conta 2
        if(Integer.parseInt(textFieldNumeroContaDe.getText()) == acc1.getNumero() && (Integer.parseInt(textFieldNumeroContaPara.getText()) == acc2.getNumero()))
        {
            FaseDeOperacoes inicio = new FaseDeOperacoes(this.acc1, this.acc2, this.acc3);
            int verificador;
            
            verificador = JOptionPane.showConfirmDialog(null, acc1.getNome()+", você deseja transferir R$"+Double.parseDouble(textFieldValorTransferencia.getText())+" para "+acc2.getNome()+" ?", "Operação: Transferência", JOptionPane.OK_CANCEL_OPTION);
            
            if(verificador == JOptionPane.OK_OPTION)
            {
                acc1.sacar(Double.parseDouble(textFieldValorTransferencia.getText()));
                acc2.depositar(Double.parseDouble(textFieldValorTransferencia.getText()));
                JOptionPane.showMessageDialog(null, "Operação de transferência efetuada com sucesso!", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                this.setVisible(false);//fecha a janela de transferência após a operação ser concluída
                inicio.setVisible(true);//chama de volta a janela da fase de operações
            } else{
                JOptionPane.showMessageDialog(null, "Operação de transferência cancelada.", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                this.setVisible(false);//fecha a janela de transferência após a operação ser cancelada
                inicio.setVisible(true);//chama de volta a janela da fase de operações
            }
        }else{
            //Caso 2: Transferência DA conta 1 PARA a conta 3
            if(Integer.parseInt(textFieldNumeroContaDe.getText()) == acc1.getNumero() && (Integer.parseInt(textFieldNumeroContaPara.getText()) == acc3.getNumero()))
            {
                FaseDeOperacoes inicio = new FaseDeOperacoes(this.acc1, this.acc2, this.acc3);
                int verificador;

                verificador = JOptionPane.showConfirmDialog(null, acc1.getNome()+", você deseja transferir R$"+Double.parseDouble(textFieldValorTransferencia.getText())+" para "+acc3.getNome()+" ?", "Operação: Transferência", JOptionPane.OK_CANCEL_OPTION);

                if(verificador == JOptionPane.OK_OPTION)
                {
                    acc1.sacar(Double.parseDouble(textFieldValorTransferencia.getText()));
                    acc3.depositar(Double.parseDouble(textFieldValorTransferencia.getText()));
                    JOptionPane.showMessageDialog(null, "Operação de transferência efetuada com sucesso!", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                    this.setVisible(false);//fecha a janela de transferência após a operação ser concluída
                    inicio.setVisible(true);//chama de volta a janela da fase de operações
                } else{
                    JOptionPane.showMessageDialog(null, "Operação de transferência cancelada.", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                    this.setVisible(false);//fecha a janela de transferência após a operação ser cancelada
                    inicio.setVisible(true);//chama de volta a janela da fase de operações
                }
            }else{
                //Caso 3: Transferência DA conta 2 PARA a conta 1
                if(Integer.parseInt(textFieldNumeroContaDe.getText()) == acc2.getNumero() && (Integer.parseInt(textFieldNumeroContaPara.getText()) == acc1.getNumero()))
                {
                    FaseDeOperacoes inicio = new FaseDeOperacoes(this.acc1, this.acc2, this.acc3);
                    int verificador;

                    verificador = JOptionPane.showConfirmDialog(null, acc2.getNome()+", você deseja transferir R$"+Double.parseDouble(textFieldValorTransferencia.getText())+" para "+acc1.getNome()+" ?", "Operação: Transferência", JOptionPane.OK_CANCEL_OPTION);

                if(verificador == JOptionPane.OK_OPTION)
                {
                    acc2.sacar(Double.parseDouble(textFieldValorTransferencia.getText()));
                    acc1.depositar(Double.parseDouble(textFieldValorTransferencia.getText()));
                    JOptionPane.showMessageDialog(null, "Operação de transferência efetuada com sucesso!", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                    this.setVisible(false);//fecha a janela de transferência após a operação ser concluída
                    inicio.setVisible(true);//chama de volta a janela da fase de operações
                } else{
                    JOptionPane.showMessageDialog(null, "Operação de transferência cancelada.", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                    this.setVisible(false);//fecha a janela de transferência após a operação ser cancelada
                    inicio.setVisible(true);//chama de volta a janela da fase de operações
                }
                }else{
                //Caso 4: Transferência DA conta 2 PARA a conta 3
                if(Integer.parseInt(textFieldNumeroContaDe.getText()) == acc2.getNumero() && (Integer.parseInt(textFieldNumeroContaPara.getText()) == acc3.getNumero()))
                {
                    FaseDeOperacoes inicio = new FaseDeOperacoes(this.acc1, this.acc2, this.acc3);
                    int verificador;

                    verificador = JOptionPane.showConfirmDialog(null, acc2.getNome()+", você deseja transferir R$"+Double.parseDouble(textFieldValorTransferencia.getText())+" para "+acc3.getNome()+" ?", "Operação: Transferência", JOptionPane.OK_CANCEL_OPTION);

                    if(verificador == JOptionPane.OK_OPTION)
                    {
                        acc2.sacar(Double.parseDouble(textFieldValorTransferencia.getText()));
                        acc3.depositar(Double.parseDouble(textFieldValorTransferencia.getText()));
                        JOptionPane.showMessageDialog(null, "Operação de transferência efetuada com sucesso!", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                        this.setVisible(false);//fecha a janela de transferência após a operação ser concluída
                        inicio.setVisible(true);//chama de volta a janela da fase de operações
                    } else{
                        JOptionPane.showMessageDialog(null, "Operação de transferência cancelada.", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                        this.setVisible(false);//fecha a janela de transferência após a operação ser cancelada
                        inicio.setVisible(true);//chama de volta a janela da fase de operações
                    }
                }else{
                    //Caso 5: Transferência DA conta 3 PARA a conta 1
                    if(Integer.parseInt(textFieldNumeroContaDe.getText()) == acc3.getNumero() && (Integer.parseInt(textFieldNumeroContaPara.getText()) == acc1.getNumero()))
                    {
                        FaseDeOperacoes inicio = new FaseDeOperacoes(this.acc1, this.acc2, this.acc3);
                        int verificador;

                        verificador = JOptionPane.showConfirmDialog(null, acc3.getNome()+", você deseja transferir R$"+Double.parseDouble(textFieldValorTransferencia.getText())+" para "+acc1.getNome()+" ?", "Operação: Transferência", JOptionPane.OK_CANCEL_OPTION);

                        if(verificador == JOptionPane.OK_OPTION)
                        {
                            acc3.sacar(Double.parseDouble(textFieldValorTransferencia.getText()));
                            acc1.depositar(Double.parseDouble(textFieldValorTransferencia.getText()));
                            JOptionPane.showMessageDialog(null, "Operação de transferência efetuada com sucesso!", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                            this.setVisible(false);//fecha a janela de transferência após a operação ser concluída
                            inicio.setVisible(true);//chama de volta a janela da fase de operações
                        } else{
                            JOptionPane.showMessageDialog(null, "Operação de transferência cancelada.", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                            this.setVisible(false);//fecha a janela de transferência após a operação ser cancelada
                            inicio.setVisible(true);//chama de volta a janela da fase de operações
                        }
                    }else{
                        //Caso 6: Transferência DA conta 3 PARA a conta 2
                        if(Integer.parseInt(textFieldNumeroContaDe.getText()) == acc3.getNumero() && (Integer.parseInt(textFieldNumeroContaPara.getText()) == acc2.getNumero()))
                        {
                            FaseDeOperacoes inicio = new FaseDeOperacoes(this.acc1, this.acc2, this.acc3);
                            int verificador;

                            verificador = JOptionPane.showConfirmDialog(null, acc3.getNome()+", você deseja transferir R$"+Double.parseDouble(textFieldValorTransferencia.getText())+" para "+acc2.getNome()+" ?", "Operação: Transferência", JOptionPane.OK_CANCEL_OPTION);

                            if(verificador == JOptionPane.OK_OPTION)
                            {
                                acc3.sacar(Double.parseDouble(textFieldValorTransferencia.getText()));
                                acc2.depositar(Double.parseDouble(textFieldValorTransferencia.getText()));
                                JOptionPane.showMessageDialog(null, "Operação de transferência efetuada com sucesso!", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                                this.setVisible(false);//fecha a janela de transferência após a operação ser concluída
                                inicio.setVisible(true);//chama de volta a janela da fase de operações
                            } else{
                                JOptionPane.showMessageDialog(null, "Operação de transferência cancelada.", "Operação: Transferência", JOptionPane.INFORMATION_MESSAGE);
                                this.setVisible(false);//fecha a janela de transferência após a operação ser cancelada
                                inicio.setVisible(true);//chama de volta a janela da fase de operações
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "O número das contas digitado é inválido!", "Aviso", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                }
                }
            }
        }
    }//GEN-LAST:event_btnContinuarTelaTransferenciaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaTransferencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaTransferencia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnContinuarTelaTransferencia;
    private javax.swing.JButton btnVoltarTelaTransferencia;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField textFieldNumeroContaDe;
    private javax.swing.JTextField textFieldNumeroContaPara;
    private javax.swing.JTextField textFieldValorTransferencia;
    // End of variables declaration//GEN-END:variables

}
